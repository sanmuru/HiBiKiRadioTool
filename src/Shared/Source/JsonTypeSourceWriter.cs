// Licensed to the Qtyi under one or more agreements.
// The Qtyi licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

namespace Qtyi.HiBiKiRadio.Generators;

using Model;

internal sealed class JsonTypeSourceWriter : IndentWriter
{
    private readonly Response _response;
    private readonly Dictionary<string, Object> _nameModelMap = new();

    public JsonTypeSourceWriter(TextWriter writer, Response response, CancellationToken cancellationToken = default) : base(writer, cancellationToken)
    {
        this._response = response;
    }

    public static void WriteSource(TextWriter writer, Response response, CancellationToken cancellationToken = default) =>
        new JsonTypeSourceWriter(writer, response, cancellationToken).WriteSource();

    private void WriteSource()
    {
        this.WriteFileHeader();
        this.WriteTypes();
    }

    private void WriteFileHeader()
    {
        WriteLine("// <auto-generated />");
        WriteLine();
        WriteLine("#nullable enable");
        WriteLine("#pragma warning disable CS1591, CS8618");
        WriteLine();
        WriteLine("using System;");
        WriteLine();
        WriteLine("namespace Qtyi.HiBiKiRadio.Json");
        WriteLine();
    }

    private void WriteTypes()
    {
        foreach (var model in this._response.Models)
        {
            if (!this._nameModelMap.ContainsKey(model.Name))
            {
                this._nameModelMap.Add(model.Name, model);
                this.WriteType(model);
            }
        }
    }

    private void WriteType(Object model)
    {
        WriteLine($"internal seald class {model.Name}");
        OpenBlock();
        this.WriteProperties(model);
        CloseBlock();
        WriteLine();
    }

    private void WriteProperties(Object model)
    {
        HashSet<string> propertyNames = new();
        foreach (var property in model.Properties)
        {
            if (propertyNames.Add(property.Name))
            {
                this.WriteProperty(property);
            }
        }
    }

    private void WriteProperty(PropertyBase property)
    {
        Write("public ");
        switch (property)
        {
            case EnumProperty:
            case IntegerProperty:
                Write("int");
                break;

            case ObjectProperty objectProperty:
                Write(objectProperty.Name);
                break;

            case StringProperty:
                Write("string");
                break;
        }
        if (property.Optional)
        {
            Write("?");
        }
        WriteLine($" {property.Name} {{ get; init; }}");
    }
}
